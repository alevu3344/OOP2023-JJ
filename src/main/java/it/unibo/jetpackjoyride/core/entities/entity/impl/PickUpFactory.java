package it.unibo.jetpackjoyride.core.entities.entity.impl;

import it.unibo.jetpackjoyride.core.entities.pickups.api.PickUp;
import it.unibo.jetpackjoyride.core.entities.pickups.api.PickUp.PickUpType;
import it.unibo.jetpackjoyride.core.entities.pickups.impl.ShieldPickUp;
import it.unibo.jetpackjoyride.core.entities.pickups.impl.VehiclePickUp;
import it.unibo.jetpackjoyride.core.hitbox.api.Hitbox;
import it.unibo.jetpackjoyride.core.hitbox.impl.HitboxImpl;
import it.unibo.jetpackjoyride.core.movement.Movement;
import it.unibo.jetpackjoyride.utilities.MovementChangers;
import it.unibo.jetpackjoyride.utilities.Pair;
import it.unibo.jetpackjoyride.utilities.exceptions.NotImplementedObjectException;
import java.util.List;

/**
 * The {@link PickUpFactory} class is a factory for all {@link PickUp}.
 * {@link PickUp} have to be generated by supplying an {@link PickUpType}.
 * The entity is generated by combining the two classes {@link HitboxImpl} and {@link Movement}.
 * The {@link Hitbox} class is fixed for every type of entity and doesn't need to
 * be provided.
 * 
 * @author gabriel.stira@studio.unibo.it
 */
public class PickUpFactory {
    /*
     * Define the coordinates where the pickups will be generated.
     */
    private static final Pair<Double, Double> VEHICLE_PICKUP_SPAWNING_COORDINATES = new Pair<>(1350.0, 360.0);
    private static final Pair<Double, Double> SHIELD_PICKUP_SPAWNING_COORDINATES = new Pair<>(1350.0, 360.0);

    /*
     * Define the dimensions of the hitbox of the pickups.
     */
    private static final Pair<Double, Double> VEHICLE_PICKUP_HITBOX_DIMENSIONS = new Pair<>(80.0, 80.0);
    private static final Pair<Double, Double> SHIELD_PICKUP_HITBOX_DIMENSIONS = new Pair<>(50.0, 50.0);

    /*
     * Define more movement characteristics of some pickups.
     */
    private static final Pair<Double, Double> VEHICLE_PICKUP_BASE_SPEED = new Pair<>(-3.0, 0.0);
    private static final Pair<Double, Double> SHIELD_PICKUP_BASE_SPEED = new Pair<>(-5.0, 0.0);

    /**
     * Generates an {@link PickUp} based on the supplied {@link PickUpType}.
     * @param pickUpType The type of the pickup to generate.
     * @return An {@link PickUp} with the specified {@link PickUpType}.
     */
    public PickUp generatePickUp(final PickUpType pickUpType) {
        Movement pickUpMovement;
        Hitbox pickUpHitbox;
        PickUp pickUpModel;

        try {
            switch (pickUpType) {
                case VEHICLE: // Canon pickup existing in the original game
                    pickUpMovement = new Movement.Builder().addNewPosition(VEHICLE_PICKUP_SPAWNING_COORDINATES)
                            .addNewSpeed(VEHICLE_PICKUP_BASE_SPEED).addNewMovementChangers(List.of(MovementChangers.GRAVITY))
                            .build();
                    pickUpHitbox = new HitboxImpl(pickUpMovement.getPosition(), VEHICLE_PICKUP_HITBOX_DIMENSIONS,
                            pickUpMovement.getRotation().get1());
                    pickUpModel = new VehiclePickUp(pickUpMovement, pickUpHitbox);
                    break;
                case SHIELD: // Canon pickup existing in the original game
                    pickUpMovement = new Movement.Builder().addNewPosition(SHIELD_PICKUP_SPAWNING_COORDINATES)
                            .addNewSpeed(SHIELD_PICKUP_BASE_SPEED).build();
                    pickUpHitbox = new HitboxImpl(pickUpMovement.getPosition(), SHIELD_PICKUP_HITBOX_DIMENSIONS,
                            pickUpMovement.getRotation().get1());
                    pickUpModel = new ShieldPickUp(pickUpMovement, pickUpHitbox);
                    break;
                default:
                    throw new NotImplementedObjectException(
                            "EntityModelGenerator could not generate the pickup. A vehicle pickups will be generated instead.");
            }
        } catch (NotImplementedObjectException e) {
            pickUpMovement = new Movement.Builder().addNewPosition(VEHICLE_PICKUP_SPAWNING_COORDINATES)
                    .addNewSpeed(VEHICLE_PICKUP_BASE_SPEED).addNewMovementChangers(List.of(MovementChangers.GRAVITY)).build();
            pickUpHitbox = new HitboxImpl(pickUpMovement.getPosition(), VEHICLE_PICKUP_HITBOX_DIMENSIONS, 0.0);
            pickUpModel = new VehiclePickUp(pickUpMovement, pickUpHitbox);
        }

        return pickUpModel;
    }
}
