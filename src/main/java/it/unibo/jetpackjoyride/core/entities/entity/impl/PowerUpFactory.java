package it.unibo.jetpackjoyride.core.entities.entity.impl;

import it.unibo.jetpackjoyride.core.entities.powerup.api.PowerUp;
import it.unibo.jetpackjoyride.core.entities.powerup.api.PowerUp.PowerUpType;
import it.unibo.jetpackjoyride.core.entities.powerup.impl.DukeFishron;
import it.unibo.jetpackjoyride.core.entities.powerup.impl.LilStomper;
import it.unibo.jetpackjoyride.core.entities.powerup.impl.MrCuddlesGenerator;
import it.unibo.jetpackjoyride.core.entities.powerup.impl.ProfitBird;
import it.unibo.jetpackjoyride.core.hitbox.api.Hitbox;
import it.unibo.jetpackjoyride.core.hitbox.impl.HitboxImpl;
import it.unibo.jetpackjoyride.core.movement.Movement;
import it.unibo.jetpackjoyride.utilities.MovementChangers;
import it.unibo.jetpackjoyride.utilities.Pair;
import it.unibo.jetpackjoyride.utilities.exceptions.NotImplementedObjectException;
import java.util.List;
import java.util.ArrayList;

/**
 * The {@link PowerUpFactory} class is a factory for all {@link PowerUp}.
 * {@link PowerUp} have to be generated by supplying an {@link PowerUpType}.
 * The entity is generated by combining the two classes {@link HitboxImpl} and {@link Movement}.
 * The {@link Hitbox} class is fixed for every type of entity and doesn't need to
 * be provided.
 * 
 * @author gabriel.stira@studio.unibo.it
 */
public class PowerUpFactory {
    /*
     * Define the coordinates where the powerups will be generated.
     */
    private static final Pair<Double, Double> LILSTOMPER_SPAWNING_COORDINATES = new Pair<>(200.0, 360.0);
    private static final Pair<Double, Double> MRCUDDLE_SPAWNING_COORDINATES = new Pair<>(200.0, 0.0);
    private static final Pair<Double, Double> PROFITBIRD_SPAWNING_COORDINATES = new Pair<>(200.0, 360.0);
    private static final Pair<Double, Double> DUKEFISHRON_SPAWNING_COORDINATES = new Pair<>(200.0, 360.0);

    /*
     * Define the dimensions of the hitbox of the powerups.
     */
    private static final Pair<Double, Double> LILSTOMPER_HITBOX_DIMENSIONS = new Pair<>(160.0, 140.0);
    private static final Pair<Double, Double> MRCUDDLE_HITBOX_DIMENSIONS = new Pair<>(120.0, 70.0);
    private static final Pair<Double, Double> PROFITBIRD_HITBOX_DIMENSIONS = new Pair<>(120.0, 70.0);
    private static final Pair<Double, Double> DUKEFISHRON_HITBOX_DIMENSIONS = new Pair<>(150.0, 100.0);

    /*
     * Define more movement characteristics of some powerups.
     */
    private static final Pair<Double, Double> DUKEFISHRON_BASE_SPEED = new Pair<>(0.0, 10.0);
    private static final Double DUKE_ROTATION_ANGLE = 20.0;

    /**
     * Generates an {@link PowerUp} based on the supplied {@link PowerUpType}.
     * @param powerUpType The type of the obstacle to generate.
     * @return An {@link PowerUp} with the specified {@link PowerUpType}.
     */
    public List<PowerUp> generatePowerUp(final PowerUpType powerUpType) {
        Movement powerUpMovement;
        Hitbox powerUpHitbox;
        final List<PowerUp> powerUpModels = new ArrayList<>();
        try {
            switch (powerUpType) {
                case LILSTOMPER: // Canon powerup existing in the original game
                    powerUpMovement = new Movement.Builder().addNewPosition(LILSTOMPER_SPAWNING_COORDINATES)
                            .addNewMovementChangers(List.of(MovementChangers.GRAVITY, MovementChangers.BOUNDS)).build();
                    powerUpHitbox = new HitboxImpl(powerUpMovement.getPosition(), LILSTOMPER_HITBOX_DIMENSIONS,
                            powerUpMovement.getRotation().get1());
                    powerUpModels.add(new LilStomper(powerUpMovement, powerUpHitbox));
                    break;
                case MRCUDDLES: // Canon powerup existing in the original game
                    powerUpMovement = new Movement.Builder().addNewPosition(MRCUDDLE_SPAWNING_COORDINATES)
                            .addNewMovementChangers(List.of(MovementChangers.INVERSEGRAVITY, MovementChangers.BOUNDS))
                            .build();
                    powerUpHitbox = new HitboxImpl(powerUpMovement.getPosition(), MRCUDDLE_HITBOX_DIMENSIONS,
                            powerUpMovement.getRotation().get1());
                    powerUpModels.addAll(new MrCuddlesGenerator(powerUpMovement, powerUpHitbox).generateMrCuddle());
                    break;
                case PROFITBIRD: // Canon powerup existing in the original game
                    powerUpMovement = new Movement.Builder().addNewPosition(PROFITBIRD_SPAWNING_COORDINATES)
                            .addNewMovementChangers(List.of(MovementChangers.GRAVITY, MovementChangers.BOUNDS)).build();
                    powerUpHitbox = new HitboxImpl(powerUpMovement.getPosition(), PROFITBIRD_HITBOX_DIMENSIONS,
                            powerUpMovement.getRotation().get1());
                    powerUpModels.add(new ProfitBird(powerUpMovement, powerUpHitbox));
                    break;
                case DUKEFISHRON: // Non canon powerup. An easter egg for Terraria players ;)
                    powerUpMovement = new Movement.Builder().addNewPosition(DUKEFISHRON_SPAWNING_COORDINATES)
                            .addNewSpeed(DUKEFISHRON_BASE_SPEED).addNewRotation(DUKE_ROTATION_ANGLE, 0.0)
                            .addNewMovementChangers(List.of(MovementChangers.BOUNCING)).build();
                    powerUpHitbox = new HitboxImpl(powerUpMovement.getPosition(), DUKEFISHRON_HITBOX_DIMENSIONS,
                            powerUpMovement.getRotation().get1());
                    powerUpModels.add(new DukeFishron(powerUpMovement, powerUpHitbox));
                    break;
                default:
                    throw new NotImplementedObjectException(
                            "EntityModelGenerator could not generate the obstacle." 
                          + "A lilStomper powerup will be spawned instead.");
            }
        } catch (NotImplementedObjectException e) {
            powerUpMovement = new Movement.Builder().addNewPosition(LILSTOMPER_SPAWNING_COORDINATES)
                    .addNewMovementChangers(List.of(MovementChangers.GRAVITY, MovementChangers.BOUNDS)).build();
            powerUpHitbox = new HitboxImpl(powerUpMovement.getPosition(), LILSTOMPER_HITBOX_DIMENSIONS, 0.0);
            powerUpModels.add(new LilStomper(powerUpMovement, powerUpHitbox));
        }

        return powerUpModels;
    }
}
